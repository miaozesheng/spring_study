Spring

IOC 控制反转部分 主要就是将对象的创建和管理交由spring容器管理,解耦

    spring bean 管理底层是使用工厂进行对象的创建
    bean的生命周期:
        1.默认使用无参构造器进行对象的创建
        2.调用set方法注入属性值
        3.bean对象的初始化 在初始化之前之后还可以做一些扩展操作
        4.对象的使用
        5.对象的销毁

    关于bean对象的注入
        1.xml配置方式
            在xml配置文件中,配置<bean>标签相关内容
        2.注解实现方式
            @Controller
            @Service
            @Repository
            @Component

    在使用注解时,可以在xml配置文件中配置包扫描标签 <component-scan> 或者完全通过注解实现,不需要xml文件,那么写一个配置类,加上@Configuration注解,启动的时候读该配置类即可.

    关于bean属性的注入
        1.xml配置文件实现
            写在<bean>标签中 使用<property>标签赋值
        2.通过注解实现
            @Autowired Spring注解 根据类型注入 spring中,一个接口的实现类使用@Controller等注解交由spring管理是,此时id就是接口名称首字母小写
                如UserService id就是userService
            @Qualified Spring注解,根据名称注入 当一个接口存在多个实现类,那么实现类要自己在注解上添加名称,用以区分 可以这样使用@Autowired @Qualified(name="UserServiceImpl2") 区分不同实现的bean对象的注入
                如实现类1 UserServiceImpl1                      实现类2 UserServiceImpl2
                那么注解  @Service(value="UserServiceImpl1")    @Service(value="UserServiceImpl2")
            @Resource 扩展注解,不属于Spring,可以根据类型或者名称注入,默认为根据类型注入,使用名称注入时,需要指定@Resource(name="")
            @Value 不用来做对象的注入,可以用来做简单数据类型的注入,如
                @Value("123")                               @Value(${name})
                private String name; 此时可以将123赋值给name    此时会取配置文件的配置用来做注入

AOP 面向切面编程 在不改变源代码的情况下,对于代码实现增强 及将部分与业务逻辑无关的东西独立出来,解耦 实现方式为动态代理实现
    动态代理:
        有接口的:使用JDK动态代理实现 给接口的实现类实现一个代理对象,代理对象可以对该实现类的方法进行增强
        没有接口的:使用CGLIB实现
    AOP术语:
        连接点 在一个类中,哪些方法可以被增强,那么就是连接点
        切入点 实际被增强的方法就是切入点   一个类中可能有十个方法可以被增强,但是并没有去全部增强,只有其中五个被真正增强了,那么这五个方法就是切入点
        通知(增强) 实际增强的逻辑部分就叫通知  如对于一个方法,通过aop实现记录日志的能力,那么记录日志的部分就是通知(增强)
            前置通知 增强方法之前
            后置通知 增强方法之后
            异常通知 增强方法中出现异常
            最终通知 最后执行
            环绕通知 增强方法之前和之后
        切面 是动作 把上述的通知应用到切入的这个动作,就叫做切面
    AOP准备 Spring一般是基于AspectJ实现AOP操作的
        1.AspectJ不是Spring的组成部分,是一个独立的AOP框架 和spring框架一起使用,进行aop操作
        2.基于Aspect实现AOP操作
            基于xml配置文件
            基础注解实现
        3.切入点表达式
            作用:对哪个类的哪个方法进行增强
            语法结构: Execution([权限修饰符] [返回类型] [类全路径] [方法名称] ([参数列表]))
            example1: 对com.study.bookDao 类里边的add(int a,int b)方法进行增强
                execution(* com.study.bookDao.add(..)) 权限修饰符使用*代替,代表对于所有权限类型都可用 返回类型进行省略
            example2: 对com.study.bookDao 类里边的所有方法进行增强
                execution(* com.study.bookDao.*(..))
            example3: 对com.study里边的所有的所有方法进行增强
                execution(* com.study.*.*(..))

        4.aop使用注解实现:
            1.创建常用类 Book
            2.创建增强类 BookProxy
                增强类里边,创建方法,让不同方法代表不同通知类型
            3.进行通知的配置
                在spring文件中,开启注解的扫描
                使用注解创建Book对象和BookProxy对象
                在增强类上面添加注解@Aspect
                在spring配置文件中开启生成代理对象

spring事务
    一般事务是放到service中
spring中进行事务管理的操作
    编程式事务管理
    声明式事务管理(一般使用) 底层使用AOP
        基于注解实现(多使用)
        基于xml配置实现
    事务管理的api 代表事务管理器 这个接口针对于不同的框架提供了不同的实现类 PlatformTransactionManager

    @Transactional // 加到类上,那就是这个类里边的所有方法都加上事务
    @Transactional//如果加在方法上边,那么只给这个方法加上注解

@Transactional参数说明 b站收藏 朝阳老师
    porpagation 事务的传播行为
        多事务方法之间进行调用,这个过程中事务是如何进行管理的.

        !!!!!在进行事务传播行为的讨论时,我们是站在被调用这的角度上去思考的.
        如果存在两个方法A和B,A去调用B,那么此时我们通过分析方法B来探讨事务传播机制,如方法b决定的就是加入方法a中的事务,还是方法b重新开启一个事务

        required 表示当前方法必须运行在事务中,如果当前事务存在,方法将会在该事务中运行,如果当前事务不存在,那么会启动一个新的事务
        supports 表示当前方法不需要事务上下文,如果存在当前事务的话,那么该方法会在这个事务中运行 如果没有,那么以非事务方式运行
        mandatory 表示该方法必须在事务中运行,如果当前事务不存在,那么会抛出一个异常 存在事务则加入
        required_new 表示当前方法必须运行在自己的事务当中,一个新的事务将被启动,如果存在当前事务,那么当前事务会被挂起
                    新开启的事务和外层事务没有关联,如果外层事务出错,那么新开事务中改变的数据不会回滚.
                    nested中嵌套事务则会回滚


        not_supported 该方法不应该运行在事务当中,如果存在当前事务,那么该方法运行期间,当前事务将被挂起
        never 表示改签方法不应该运行在事务上下文当中,如果当前正有一个事务在运行,那么会抛出异常
        nested 表示如果当前已经存在一个事务,那么该方法将会在嵌套事务中运行,嵌套的事务可以独立于当前事务进行单独的提交或回滚.如果当前事务不存在,那么行为和required一致
    isolation 事务的隔离级别
        读未提交
        读已提交
        可重复读
        串行化
    timeout 超时时间 如果事务在多长时间内没有进行提交,那么就会回滚掉 默认-1 不超时 设置时间为秒
    readOnly 是否只读 默认false 可以增删改查 如果改为true,那么只能查不能改
    rollbackFor 回滚 可以设置出现哪些异常进行回滚
    noRollbackFor 不回滚 可以甚至出现哪些异常不进行回滚

